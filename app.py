# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SltkVkrrid8j2Fx4psf293EvvIL8t9mR
"""

import streamlit as st
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.title("STaR-Clock Simulator (Plasmid + Synthetic Cassette + BAI)")

# -------------------------------
# Sidebar: Simulation parameters
# -------------------------------
st.sidebar.header("Simulation Parameters")
num_samples = st.sidebar.slider("Number of samples", 1, 20, 6)
cassette_length = st.sidebar.slider("Cassette length", 10, 50, 20)
editable_Cs = st.sidebar.slider("Editable Cs per cassette", 1, 20, 8)

weights = {"DDR": 0.25, "ROS": 0.2, "p16": 0.2, "NFkB": 0.15, "HSF1": 0.2}
st.sidebar.header("Sensor Weights (BAI calculation)")
for s in weights.keys():
    weights[s] = st.sidebar.slider(f"{s} weight", 0.0, 1.0, weights[s], 0.05)

# -------------------------------
# Sensors
# -------------------------------
sensors = ["DDR", "ROS", "p16", "NFkB", "HSF1"]

# -------------------------------
# Synthetic cassette generator
# -------------------------------
def generate_cassette(length, num_C):
    seq = ['A']*length
    C_positions = random.sample(range(length), num_C)
    for pos in C_positions:
        seq[pos] = 'C'
    return ''.join(seq)

cassettes = {s: generate_cassette(cassette_length, editable_Cs) for s in sensors}
st.subheader("Synthetic cassettes for each sensor")
for s, seq in cassettes.items():
    st.text(f"{s}: {seq}")

# -------------------------------
# Multiple plasmid upload
# -------------------------------
st.sidebar.header("Upload Plasmids (FASTA/GenBank)")
uploaded_files = st.sidebar.file_uploader("Upload plasmid files", type=["fasta","gb","gbk"], accept_multiple_files=True)

combined_plasmids = {}
if uploaded_files:
    for f in uploaded_files:
        try:
            record = SeqIO.read(f, "fasta")
        except:
            record = SeqIO.read(f, "genbank")
        # Attach synthetic cassettes
        cassette_seq = ''.join(cassettes.values())
        combined_seq = str(record.seq) + cassette_seq
        combined_plasmids[record.id] = combined_seq
        st.subheader(f"Plasmid: {record.id}")
        st.text(f"Original length: {len(record.seq)} | After cassette: {len(combined_seq)}")
        st.text(f"Combined sequence (first 200 bases):\n{combined_seq[:200]} ...")

# -------------------------------
# Initialize "marks" (edits)
# -------------------------------
cassette_counts = {s: np.zeros(editable_Cs, dtype=int) for s in sensors}

# -------------------------------
# Simulate stress pulses
# -------------------------------
simulated_data = []
for sample in range(num_samples):
    sample_counts = {}
    for s in sensors:
        marks = np.random.binomial(1, 0.3, editable_Cs)
        cassette_counts[s] += marks
        sample_counts[s] = sum(cassette_counts[s])
    simulated_data.append(sample_counts)

df = pd.DataFrame(simulated_data)
df_norm = df / editable_Cs
df_norm["BAI"] = sum(df_norm[s]*weights[s] for s in sensors)

st.subheader("Simulated per-sensor counts and normalized BAI")
st.dataframe(df_norm)

# -------------------------------
# Plotting
# -------------------------------
x = np.arange(num_samples)
fig1, ax1 = plt.subplots(figsize=(10,6))
ax1.bar(x, df_norm["BAI"], color='skyblue')
ax1.set_xticks(x)
ax1.set_xticklabels([f"Sample {i+1}" for i in range(num_samples)])
ax1.set_ylabel("Biological Age Index (BAI)")
ax1.set_title("Simulated BAI Across Samples")
st.pyplot(fig1)

fig2, ax2 = plt.subplots(figsize=(10,6))
bottom = np.zeros(num_samples)
colors = ['red', 'green', 'blue', 'orange', 'purple']
for i, s in enumerate(sensors):
    ax2.bar(x, df_norm[s]*weights[s], bottom=bottom, color=colors[i], label=s)
    bottom += df_norm[s]*weights[s]
ax2.set_xticks(x)
ax2.set_xticklabels([f"Sample {i+1}" for i in range(num_samples)])
ax2.set_ylabel("Weighted BAI Contribution")
ax2.set_title("Per-Sensor Contributions to BAI")
ax2.legend()
st.pyplot(fig2)

